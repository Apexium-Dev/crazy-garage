name: Add Gallery Item from Issue

on:
  issues:
    types: [opened]

jobs:
  add-gallery-item:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
      - name: Check if issue has gallery label
        id: check-label
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.issue.labels.map(l => l.name);
            core.setOutput('has_gallery', labels.includes('gallery'));

      - name: Checkout repository
        if: steps.check-label.outputs.has_gallery == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: steps.check-label.outputs.has_gallery == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Extract image URLs from issue
        if: steps.check-label.outputs.has_gallery == 'true'
        id: extract-images
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Extract image URLs - GitHub hosts them at user-images.githubusercontent.com
            const imageRegex = /https:\/\/user-images\.githubusercontent\.com\/[^\s)]+/g;
            const images = issue.data.body.match(imageRegex) || [];

            const beforeImg = images[0] || '';
            const afterImg = images[1] || images[0] || '';

            console.log('Found images:', images.length);
            console.log('Before:', beforeImg);
            console.log('After:', afterImg);

            core.setOutput('beforeImage', beforeImg);
            core.setOutput('afterImage', afterImg);

      - name: Parse issue body
        if: steps.check-label.outputs.has_gallery == 'true'
        id: parse-issue
        run: |
          body="${{ github.event.issue.body }}"

          # Write body to file for parsing
          echo "$body" > issue-body.txt

          # Extract titles (looking for the section after "### Title (...)")
          title_en=$(awk '/### Title \(English\)/,/^###|^$/ {if (/^###/) next; if (NF > 0 && $0 !~ /^###/) print}' issue-body.txt | head -1 | xargs)
          title_mk=$(awk '/### Title \(Macedonian/,/^###|^$/ {if (/^###/) next; if (NF > 0 && $0 !~ /^###/) print}' issue-body.txt | head -1 | xargs)
          title_sq=$(awk '/### Title \(Albanian/,/^###|^$/ {if (/^###/) next; if (NF > 0 && $0 !~ /^###/) print}' issue-body.txt | head -1 | xargs)

          # Extract descriptions (get all lines after header until next ###)
          desc_en=$(awk '/### Description \(English\)/,/^###/ {if (/^###/ && NR>1) exit; if (NF > 0 && $0 !~ /^###/) print}' issue-body.txt | xargs)
          desc_mk=$(awk '/### Description \(Macedonian/,/^###/ {if (/^###/ && NR>1) exit; if (NF > 0 && $0 !~ /^###/) print}' issue-body.txt | xargs)
          desc_sq=$(awk '/### Description \(Albanian/,/^###/ {if (/^###/ && NR>1) exit; if (NF > 0 && $0 !~ /^###/) print}' issue-body.txt | xargs)

          echo "title_en=$title_en" >> $GITHUB_OUTPUT
          echo "title_mk=$title_mk" >> $GITHUB_OUTPUT
          echo "title_sq=$title_sq" >> $GITHUB_OUTPUT
          echo "desc_en=$desc_en" >> $GITHUB_OUTPUT
          echo "desc_mk=$desc_mk" >> $GITHUB_OUTPUT
          echo "desc_sq=$desc_sq" >> $GITHUB_OUTPUT

          echo "Parsed data:"
          echo "Title EN: $title_en"
          echo "Title MK: $title_mk"
          echo "Title SQ: $title_sq"

      - name: Create new gallery item JSON
        if: steps.check-label.outputs.has_gallery == 'true'
        run: |
          timestamp=$(date +%s)000

          cat > new-item.json << 'EOF'
          {
            "timestamp": $timestamp,
            "title": {
              "en": "${{ steps.parse-issue.outputs.title_en }}",
              "mk": "${{ steps.parse-issue.outputs.title_mk }}",
              "sq": "${{ steps.parse-issue.outputs.title_sq }}"
            },
            "description": {
              "en": "${{ steps.parse-issue.outputs.desc_en }}",
              "mk": "${{ steps.parse-issue.outputs.desc_mk }}",
              "sq": "${{ steps.parse-issue.outputs.desc_sq }}"
            },
            "beforeImage": "${{ steps.extract-images.outputs.beforeImage }}",
            "afterImage": "${{ steps.extract-images.outputs.afterImage }}"
          }
          EOF

          cat new-item.json

      - name: Update gallery.json
        if: steps.check-label.outputs.has_gallery == 'true'
        run: |
          # Install jq for JSON manipulation
          sudo apt-get update && sudo apt-get install -y jq

          # Backup original
          cp public/data/gallery.json gallery-backup.json

          # Read current gallery
          current=$(cat public/data/gallery.json)

          # Add new item to array
          new_item=$(cat new-item.json)
          updated=$(echo "$current" | jq --argjson new "$new_item" '. + [$new]')

          # Write updated gallery
          echo "$updated" > public/data/gallery.json

          # Verify it worked
          echo "Updated gallery:"
          cat public/data/gallery.json

      - name: Commit and push
        if: steps.check-label.outputs.has_gallery == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add public/data/gallery.json
          git commit -m "Add gallery item from issue #${{ github.event.issue.number }}" || exit 0
          git push

      - name: Comment and close issue
        if: steps.check-label.outputs.has_gallery == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Gallery item added successfully! The changes will be live on the site shortly.'
            });

            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });
